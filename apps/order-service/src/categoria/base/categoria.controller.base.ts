/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategoriaService } from "../categoria.service";
import { CategoriaCreateInput } from "./CategoriaCreateInput";
import { Categoria } from "./Categoria";
import { CategoriaFindManyArgs } from "./CategoriaFindManyArgs";
import { CategoriaWhereUniqueInput } from "./CategoriaWhereUniqueInput";
import { CategoriaUpdateInput } from "./CategoriaUpdateInput";

export class CategoriaControllerBase {
  constructor(protected readonly service: CategoriaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Categoria })
  async createCategoria(
    @common.Body() data: CategoriaCreateInput
  ): Promise<Categoria> {
    return await this.service.createCategoria({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Categoria] })
  @ApiNestedQuery(CategoriaFindManyArgs)
  async categorias(@common.Req() request: Request): Promise<Categoria[]> {
    const args = plainToClass(CategoriaFindManyArgs, request.query);
    return this.service.categorias({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Categoria })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async categoria(
    @common.Param() params: CategoriaWhereUniqueInput
  ): Promise<Categoria | null> {
    const result = await this.service.categoria({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Categoria })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCategoria(
    @common.Param() params: CategoriaWhereUniqueInput,
    @common.Body() data: CategoriaUpdateInput
  ): Promise<Categoria | null> {
    try {
      return await this.service.updateCategoria({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Categoria })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCategoria(
    @common.Param() params: CategoriaWhereUniqueInput
  ): Promise<Categoria | null> {
    try {
      return await this.service.deleteCategoria({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
